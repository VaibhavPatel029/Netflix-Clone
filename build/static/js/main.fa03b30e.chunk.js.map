{"version":3,"sources":["Requests.js","axios/axios.js","components/Banner.js","components/Nav.js","components/Row.js","screens/HomeScreen.js","screens/SignInScreen.js","firebase/firebase.js","screens/SignUpScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","poster_path","id","padding","videoId","opts","height","width","playerVars","autoplay","HomeScreen","SignInScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SignUpScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","signInWithEmailAndPassword","current","value","authUser","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa03b30e.chunk.js","sourcesContent":["// Typically we would store in {process.env API_KEY}\nconst API_KEY = 'c21f7f24a52db29bb4bcd9310e5c634c';\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance;\n","import React, { useEffect, useState } from 'react';\nimport './Banner.css';\nimport axios from '../axios/axios';\nimport requests from '../Requests';\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(string, n) {\n    return string?.length > n ? string.substr(0, n - 1) + '...' : string;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: 'cover',\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: 'center center',\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Nav.css';\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  const history = useHistory();\n\n  const transitionNavBar = () => {\n    if (window.scrollY > 100) {\n      handleShow(true);\n    } else {\n      handleShow(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', transitionNavBar);\n    return () => window.removeEventListener('scroll', transitionNavBar);\n  }, []);\n\n  return (\n    <div className={`nav ${show && 'nav__black'}`}>\n      <div className=\"nav__contents\">\n        <img\n          onClick={() => history.push('/')}\n          className=\"nav__logo\"\n          src=\"https://download.logo.wine/logo/Netflix/Netflix-Logo.wine.png\"\n          alt=\"\"\n        />\n        <img\n          onClick={() => history.push('/profile')}\n          className=\"nav__avatar\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n          alt=\"Netflix avatar logo\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import axios from '../axios/axios';\nimport React, { useEffect, useState } from 'react';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n\n    async function fetchData() {\n\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0,\n    }\n  }\n\n  const handleClick = (movie) => {\n    // console.table(movie?.title)\n    if (trailerUrl) {\n      setTrailerUrl('')\n    } else {\n      movieTrailer(movie?.title || \"\")\n        .then(url => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        }).catch((error) => console.log(error));\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map(movie => {\n          return <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n            alt={movie.name} />\n        })}\n      </div>\n      <div style={{ padding: \"10px\" }}>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import React from 'react';\nimport requests from '../Requests';\nimport Banner from '../components/Banner';\nimport './HomeScreen.css';\nimport Nav from '../components/Nav';\nimport Row from '../components/Row';\n\nfunction HomeScreen() {\n  return (\n    <div className=\"homeScreen\">\n      {/* NavBar */}\n      <Nav />\n\n      {/* Bannder */}\n      <Banner />\n\n      {/* Row */}\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Moves\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","import React from 'react';\n\nfunction SignInScreen() {\n  return (\n    <div className=\"signIn\">\n      <h1>Hello from SignIn</h1>\n    </div>\n  );\n}\n\nexport default SignInScreen;\n","import firebase from 'firebase';\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD35MyjUodOpGmYxxRan3UWu6Rx2JPXDOA\",\n  authDomain: \"netflix-clone-3ab9d.firebaseapp.com\",\n  projectId: \"netflix-clone-3ab9d\",\n  storageBucket: \"netflix-clone-3ab9d.appspot.com\",\n  messagingSenderId: \"419568121709\",\n  appId: \"1:419568121709:web:9d4c073b7a43023b5b0c64\",\n  measurementId: \"G-S95037RBY8\"\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport { auth };\nexport default db;\n","import React, { useRef } from 'react';\nimport { auth } from '../firebase/firebase';\nimport './SignUpScreen.css';\n\nfunction SignUpScreen() {\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  const register = (e) => {\n    e.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(\n        emailRef.current.value,\n        passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n\n  const signIn = (e) => {\n    e.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(\n        emailRef.current.value,\n        passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"signupScreen\">\n      <form>\n        <h1>Sign In</h1>\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\n        <button type=\"submit\" onClick={signIn}>\n          Sign In\n        </button>\n\n        <h4>\n          <span className=\"signupScreen__gray\">New to Netflix? </span>\n          <span className=\"signupScreen__link\" onClick={register}>\n            Sign Up now.\n          </span>\n        </h4>\n      </form>\n    </div>\n  );\n}\n\nexport default SignUpScreen;\n","import React, { useState } from 'react';\nimport './LoginScreen.css';\nimport SignInScreen from './SignInScreen';\nimport SignUpScreen from './SignUpScreen';\n\nfunction LoginScreen() {\n  const [signIn, setSignIn] = useState(false);\n\n  return (\n    <div className=\"loginScreen\">\n      <div className=\"loginScreen__background\">\n        <img\n          className=\"loginScreen__logo\"\n          src=\"https://download.logo.wine/logo/Netflix/Netflix-Logo.wine.png\"\n          alt=\"logo\"\n        />\n        <button onClick={() => setSignIn(true)} className=\"loginScreen__button\">\n          Sign In\n        </button>\n        <div className=\"loginScreen__gradient\" />\n      </div>\n      <div className=\"loginScreen__body\">\n        {signIn ? (\n          <SignUpScreen />\n        ) : (\n          <>\n            <h1>Unlimited films, TV programmes and more.</h1>\n            <h2>Watch anywhere. Cancel at any time.</h2>\n            <h3>\n              Ready to watch? Enter your email to create or restart your\n              membership.\n            </h3>\n            <div className=\"loginScreen__input\">\n              <form>\n                <input type=\"email\" placeholder=\"Email Address\" />\n                <button\n                  onClick={() => setSignIn(true)}\n                  className=\"loginScreen__getStarted\"\n                >\n                  GET STARTED\n                </button>\n              </form>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Nav from '../components/Nav';\nimport { selectUser } from '../features/userSlice';\nimport { auth } from '../firebase/firebase';\n// import PlansScreen from './PlansScreen';\nimport './ProfileScreen.css';\n\nfunction ProfileScreen() {\n  const user = useSelector(selectUser);\n\n  return (\n    <div className=\"profileScreen\">\n      <Nav />\n      <div className=\"profileScreen__body\">\n        <h1>Edit Profile</h1>\n        <div className=\"profileScreen__info\">\n          <img\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n            alt=\"\"\n          />\n          <div className=\"profileScreen__details\">\n            <h2>{user.email}</h2>\n            <div className=\"profileScreen__plans\">\n              {/* <h3>Plans</h3>\n\n              <PlansScreen /> */}\n              <button\n                onClick={() => auth.signOut()}\n                className=\"profileScreen__signOut\"\n              >\n                Sign Out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileScreen;\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport LoginScreen from './screens/LoginScreen';\nimport { auth } from './firebase/firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        //Logged in\n        console.log(userAuth);\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          })\n        );\n      } else {\n        //Logged out\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path=\"/profile\">\n              <ProfileScreen />\n            </Route>\n            <Route exact path=\"/\">\n              <HomeScreen />\n            </Route>\n          </Switch>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}